# AUTOGENERATED! DO NOT EDIT! File to edit: data.ipynb (unless otherwise specified).

__all__ = ['torch2np', 'denorm', 'SubsetSampler', 'SubsetDataloader', 'ImgCSVDataset']

# Cell
import copy
import random
import shutil
from pathlib import Path

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import torch
import torch.utils.data as data
import torchvision.transforms as transforms
from IPython.core.debugger import set_trace
from PIL import Image

# Cell
def torch2np(img): return img.permute(1,2,0).detach().cpu().numpy()

# Cell
def denorm(img): return (img*np.array([0.229, 0.224, 0.225]) + np.array([0.485, 0.456, 0.406])).clip(0, 1)

# Cell
class SubsetSampler(data.Sampler):
    def __init__(self, data_source, num_samples=None):
        self.data_source = data_source
        self.num_samples = num_samples if num_samples is not None else len(data_source)

    def __iter__(self):
        n = len(self.data_source)
        return iter(torch.randperm(n)[:self.num_samples].tolist())

    def __len__(self):
        return self.num_samples

# Cell
class SubsetDataloader(data.DataLoader):
    def __init__(self, dataset, num_samples=None, **kwargs):
        super().__init__(dataset, sampler=SubsetSampler(dataset, num_samples), **kwargs)

# Cell
class ImgCSVDataset(data.Dataset):
    def __init__(self, dir_imgs, file_csv, tfms=None):
        self.dir_imgs = dir_imgs
        self.tfms = tfms
        self.df = pd.read_csv(file_csv)

    def __len__(self):
        return len(self.df)

    def __getitem__(self, idx):
        img = Image.open(self.dir_imgs/self.df.loc[idx, 'path']).convert('RGB')

        if self.tfms is not None:
            img = self.tfms(img)

        return img, copy.deepcopy(img)